@model RecoWeb.WebUI.Models.PRW_NotworkTop10ViewModel
@using RecoWeb.Domain.LocalResource

@{
    AjaxOptions ajaxInquiry = new AjaxOptions
    {
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        OnSuccess = "ContextInquiry",
        UpdateTargetId = "Context"

    };
}
@*actionName을 가지고 AjaxInquiryContextMenu에
        파라미터로 넘겨주고 비교해 불러올 partialView를 선택하고싶었습니다..T-T 아래와 같은 파라미터를 써서..
    , new { ccc = "SIS" }*@
@using (Ajax.BeginForm("DowntimeTop100ContextMenu", "Production", ajaxInquiry))
{
    <div class="row wrapper white-bg page-heading">
        <div class="col-lg-8 col-md-8 col-xs-12" style="display:flex;">
            <span style="float:left; padding:0.6rem; font-size:14px;">
                <i class="fa fa-th" aria-hidden="true"></i>
            </span>
            <div style="align-self:flex-end; padding:0.6rem">

                <ol class="breadcrumb" style="font-size:14px;">
                    @foreach (var page in Model.MenuLocation)
                    {
                        if (page == Model.ActivePage)
                        {
                            <li class="active">
                                <strong>@Model.resourceManager.String("Menu_" + @page) </strong>
                            </li>
                        }
                        else
                        {
                            <li>
                                <span>@Model.resourceManager.String("Menu_" + @page)</span>
                            </li>
                        }
                    }
                </ol>
            </div>
        </div>
        <div class="col-lg-4 col-md-4">
            <div class="btn-group pull-right ">
                @*<button class="btn bg-primary" type="submit" id="btn-find1"><i class="fa fa-check"></i>&nbsp;@Resource.Inquiry</button>*@
                <button class="btn bg-primary" type="submit" id="btn-find"><i class="fa fa-check"></i>&nbsp;@Resource.Inquiry</button>
            </div>
        </div>
    </div>
    <div class="row wrapper border-bottom white-bg check-item">
        <div class="btn-group">
            <span class="mr-3">
                <label class="filter-title mr-1">플랜트:</label>
                @Html.DropDownListFor(x => x.COW_FilterPlantInquiry.FirstOrDefault().PlantName,
                                        new SelectList(Model.COW_FilterPlantInquiry.Select(s => new SelectListItem { Value = s.PlantId, Text = s.PlantName }), "Value", "Text")
                                        , new { @class = "reco-width-M filter-item", @id = "Plants" })
            </span>
            <span class="mr-3">
                <label class="filter-title mr-1">공장동:</label>
                @Html.DropDownListFor(x => x.COW_FilterFactoriesAllInquiry.FirstOrDefault().FactoryName,
                                        new SelectList(Model.COW_FilterFactoriesAllInquiry.Select(s => new SelectListItem { Value = s.FactoryId, Text = s.FactoryName }), "Value", "Text")
                                        , new { @class = "reco-width-M filter-item", @id = "Factories" })
            </span>
            <span class="mr-3">
                <label class="filter-title mr-1">작업유형:</label>
                @Html.DropDownListFor(x => x.COW_FilterWorkshopTypesAllInquiry.FirstOrDefault().Desc,
                                        new SelectList(Model.COW_FilterWorkshopTypesAllInquiry.Select(s => new SelectListItem { Value = s.WorkshopTypeId, Text = s.Desc }), "Value", "Text")
                                        , new { @class = "reco-width-M filter-item", @id = "WorkshopTypes" })
            </span>
            <span class="mr-3">
                <label class="filter-title mr-1">작업장리스트:</label>
                @Html.DropDownListFor(x => x.COW_FilterWorkshopsAllInquiry.FirstOrDefault().WorkshopName,
                                        new SelectList(Model.COW_FilterWorkshopsAllInquiry.Select(s => new SelectListItem { Value = s.WorkshopCode, Text = s.WorkshopName }), "Value", "Text")
                                        , new { @class = "reco-width-M filter-item", @id = "Workshops" })
            </span>
            <span class="mr-3">
                @*현재 날짜를 둘다 받아옴. 여기서 날짜를 컨트롤하고싶다면 Controller에서 날짜 지정해서 넘겨주면됨.*@
                <label class="filter-title mr-1">일자:</label>
                @Html.TextBoxFor(m => m.startDate, "{0:yyyy-MM-dd}", new { @class = "reco-width_XL datepicker", @data_date_format = "yyyy-mm-dd", @style = "z-index:100; border:solid #A9A9A9 1px;" })
            </span>
            <span class="mr-3">
                <label class="filter-title mr-1">구분1:</label>
                <div class="btn-group radios" data-toggle="buttons" style="float:none; margin-bottom:5px;">
                    @Html.RadioButtonFor(x => x.Gubun1, Model.Gubun1 == "W" ? "W" : "W", new { @class = (Model.Gubun1 == "W" ? "checked=Checked filter-item" : "") })라인
                    @Html.RadioButtonFor(x => x.Gubun1, Model.Gubun1 == "D" ? "D" : "D", new { @class = (Model.Gubun1 == "D" ? "checked=Checked filter-item" : "") })불량
                </div>
            </span>

            <span class="mr-3">
                <label class="filter-title mr-1">구분2:</label>
                <div class="btn-group radios" data-toggle="buttons" style="float:none; margin-bottom:5px;">
                    @Html.RadioButtonFor(x => x.Gubun2, Model.Gubun2 == "D" ? "D" : "D", new { @class = (Model.Gubun2 == "D" ? "checked=Checked filter-item" : "") })일간
                    @Html.RadioButtonFor(x => x.Gubun2, Model.Gubun2 == "W" ? "W" : "W", new { @class = (Model.Gubun2 == "W" ? "checked=Checked filter-item" : "") })주간
                    @Html.RadioButtonFor(x => x.Gubun2, Model.Gubun2 == "M" ? "M" : "M", new { @class = (Model.Gubun2 == "M" ? "checked=Checked filter-item" : "") })월간
                </div>
            </span>
        </div>
    </div>


}
<div id="Context" class="row wrapper wrapper-content animated fadeInRight">
    @Html.Partial("_PNS3Context")
</div>


@section Styles {
    @*@Styles.Render("~/Content/plugins/jqGrid/jqGridStyles")
    @Styles.Render("~/plugins/morrisStyles")*@
}

@section Scripts {
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    @Scripts.Render("~/plugins/fileSaver")
    @Scripts.Render("~/plugins/dom-to-image")
    @Scripts.Render("~/plugins/sheetJs")
    @Scripts.Render("~/plugins/lightboxGallery")
    @Scripts.Render("~/plugins/sweetAlert")
    @Scripts.Render("~/plugins/html2canvas")
    @Scripts.Render("~/plugins/es6-promise")


    <script type="text/javascript">

        function ContextInquiry(returnValue) {
            var data = returnValue;
        }

        var chkcell = { cellId: undefined, chkval: undefined }; //cell rowspan 중복 체크

        //셀 Merge
        //첫 셀을 제외하고 나머지 중복되는 셀은 display=none해줌.
        function CellMerge(rowid, val, rowObject, cm, rdata) {
            var result;

            if (chkcell.chkval != val) {
                //check 값이랑 비교값이 다른 경우
                var cellId = this.id + '_row_' + rowObject.DPDate;
                result = ' rowspan="1" id ="' + cellId + '" + name="cellRowspan" style="background-color:#DCE6F1;font-size:1.2rem;font-weight: bold"';
                chkcell = { cellId: cellId, chkval: val };
            } else {
                //같을 경우 display none 처리
                result = 'style="display:none"  rowspanid="' + chkcell.cellId + '"';
            }
            return result;
        }
        //값이 0인지 체크하고 백그라운드 변경해줌.
        function CellZeroCheck(rowid, val, rowObject, cm, rdata) {
            var result = "";
            if (val == 0) {

                result = 'style="background-color:#D9D9D9;';
            }
            return result;
        }


        $(document).ready(function () {
            $(':input:checked').parent('.btn').addClass('active');

            // Dropdown list change event.
            // Dropdown list change event.
            $('#Plants').change(function () {
                $('#Factories option').remove();
                $('#WorkshopTypes option').remove();
                $('#Workshops option').remove();
                $.getJSON('../Common/GetCOW_FilterFactoriesAllInquiry', { p_PlantId: $('#Plants').val() }, function (data) {
                    $.each(data, function () {
                        $('#Factories').append('<option value=' +
                          this.FactoryId + '>' + this.FactoryName + '</option>');
                    });

                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error getting products!');
                });

                $.getJSON('../Common/GetCOW_FilterWorkshopTypesAllInquiry', { p_PlantId: $('#Plants').val() }, function (data) {
                    $.each(data, function () {
                        $('#WorkshopTypes').append('<option value=' +
                          this.WorkshopTypeId + '>' + this.Desc + '</option>');
                    });

                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error getting products!');
                });

                $.getJSON('../Common/GetCOW_FilterWorkshopsAllInquiry', { p_PlantId: $('#Plants').val(), p_FactoryId: $('#Factories').val(), p_WorkshopTypeId: $('#WorkshopTypes').val() }, function (data) {
                    $.each(data, function () {
                        $('#Workshops').append('<option value=' +
                          this.WorkshopId + '>' + this.WorkshopName + '</option>');
                    });

                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error getting products!');
                });

            });

            $('#Factories').change(function () {
                $('#Workshops option').remove();
                $.getJSON('../Common/GetCOW_FilterWorkshopsAllInquiry', { p_PlantId: $('#Plants').val(), p_FactoryId: $('#Factories').val(), p_WorkshopTypeId: $('#WorkshopTypes').val() }, function (data) {
                    $.each(data, function () {
                        $('#Workshops').append('<option value=' +
                          this.WorkshopId + '>' + this.WorkshopName + '</option>');
                    });

                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error getting products!');
                });
            });

            $('#WorkshopTypes').change(function () {
                $('#Workshops option').remove();
                $.getJSON('../Common/GetCOW_FilterWorkshopsAllInquiry', { p_PlantId: $('#Plants').val(), p_FactoryId: $('#Factories').val(), p_WorkshopTypeId: $('#WorkshopTypes').val() }, function (data) {
                    $.each(data, function () {
                        $('#Workshops').append('<option value=' +
                          this.WorkshopId + '>' + this.WorkshopName + '</option>');
                    });

                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert('Error getting products!');
                });
            });

            $('.datepicker').datepicker({
                language: 'ko'
                , autoclose: true
            });
        });
    </script>
}

<script src="~/Scripts/plugins/morris/xeponline.jqplugin.js"></script>